import.java.text.ParseException;
import.java.text.SimpleDateFormat;
import.java.util.ArrayList;
import.java.util.Date;
import.java.util.List;
import.java.util.Scanner;

class Expense{
	private String description;
	private double amount;
	private Date dueDate;
	
	public Expense(String description, double amount, Date dueDate){
		this.description = description;
		this.amount = amount;
		this.dueDate = dueDate;
	}
	
	public String getDescription(){
		return description;
	}
	
	public double getAmount(){
		return amount;
	}
	
	public getDueDate(){
		return dueDate;
	}
}

public class ExpenseTracker{
	public static void main(String[] args){
		List<Expense> expenses = new
ArrayList<>();
	Scanner scanner = new;
Scanner(System.in);
	SimpleDateFormat dateFormat = new
SimpleDateFormat("yyyy-MM-dd");

	while (true){
		System.out.println("Expense Tracker Menu:");
		System.out.println("1. Add Expenses");
		System.out.println("2. View Expenses");
		System.out.println("3. Remove Expenses");
		System.out.println("4. Exit");
		System.out.println("Enter your choice: ");
		int choice = scanner.nextInt();
		
		switch(choice){
			case 1:
				System.out.print("Enter expense description: ");
				scanner.nextLine();
				String desciption = scanner.nextLine();
				System.out.println("Enter expense amount: ");
				double amount = scanner.nextDouble();
				scanner.nextLine();
				System.out.println("Enter due date(yyyy-MM-dd): ");
				String dueDateString = scanner.nextLine();
				Date dueDate;
				try{
					dueDate = dateFormat.parse(dueDateString);
					expenses.add(newExpense(description, amount, dueDate));
					System.out.println("Expense added successfully!");
				} catch(ParseException e){
					System.out.println("Invalid date format. Please use yyy-MM-dd.");
				}
				break;
			case 2:
				System.out.println("Expenses:");
				for(int i = 0; i < expenses.size(); i++){
					Expense expense = expenses.get(i);
					System.out.println((i + 1) + "." + expense.getDescription() + ": $"
					+ expense.getAmount() + "(Due: " + dateFormat.format(expense.getDueDate())
					+ ")");
				}
				break;
			case 3:
				System.out.print("Enter the number of the expense to remove: ");
				int expenseNumber = scanner.nextInt();
				if(expenseNumber >= 1 && expenseNumber <= expenses.size()){
					expenses.remove(expenseNumber - 1);
					System.out.println("Expense removed successfully!");
				}
				else{
					System.out.println("Invalid expense number.");
				}
				break;
			case 4:
				System.out.println("Existing Expense Tracker. Goodbye!");
				scanner.close();
				System.exit(0);
			default:
				System.out.println("Invalid choice. Please try again.");
				break;
			}
		}
	}
}
					
						
							
						
		